#definition of an upstream called client
upstream client {
    #refer to the actual server that is hosted at client port 3000
    #the client as domain name here is the service name of the client in the docker compose file
    server client:3000;
}

#definition of an upstream called api which is referred as service named api in the docker compose file.
upstream api {
    server api:5000;
}

#say nginx that we want there to be a server that listens on port 80
server {
    listen 80;

    #routing rules below:

    #redirect the requests / to the upstream named client
    location / {
        proxy_pass http://client;
    }

    #redirect the requests /api to the upstream named api
    location /api {
        #use rewrite to chop off the prefix /api from the incoming requests just before send to the api upstream.
        #use break to prevent nginx to reroute after this rewrite operation in this rule.
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }

    #For the connection error in the react app:
    #Firefox canâ€™t establish a connection to the server at ws://localhost:3030/sockjs-node/235/di45tmgg/websocket.
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }
}
